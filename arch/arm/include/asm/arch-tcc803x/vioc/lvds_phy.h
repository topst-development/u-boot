// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) Telechips Inc.
 */

#ifndef LVDS_PHY_H
#define LVDS_PHY_H

/*
 * Register offset
 */
#define LVDS_RESETB (0x00)
#define LVDS_CLK_SET (0x04)
#define LVDS_AUTO_STB_SET (0x08)
#define LVDS_STB_EN (0x1C)
#define LVDS_AUTO_STB_DONE (0x2C)
#define LVDS_AUTO_STB_RDATA (0x30)
#define LVDS_EN (0x40)
#define LVDS_FORMAT (0x44)
#define LVDS_PORT (0x48)
#define LVDS_STARTUP_MODE (0x4C)
// Skip Test & Debug mode registers (0x50 ~ 0x68)
#define LVDS_USER_MODE_PHY_IF_SET0 (0x6C)
#define LVDS_USER_MODE_PHY_IF_SET1 (0x70)
#define LVDS_MONITOR_DEBUG1 (0x80)
#define LVDS_CTSET0 (0x90)
#define LVDS_CTSET1 (0x94)
#define LVDS_FCCNTR0 (0x98)
#define LVDS_FCOPT (0x9C)
#define LVDS_FCSTAT (0xA0)
#define LVDS_FCCNTVAL1 (0xA4)
#define LVDS_FCRESEVAL (0xA8)
#define LVDS_FCDSTEPSET (0xAC)
#define LVDS_FCCNTR1 (0xB0)
#define LVDS_FCCONTINSET0 (0xB4)
#define LVDS_FCCONTINSET1 (0xB8)
#define LVDS_FCCONTINSET2 (0xBC)

/*
 * Resets by software
 */
#define RSTB_CT_SHIFT (12)
#define RSTB_FIFO2_SHIFT (11)
#define RSTB_FIFO1_SHIFT (10)
#define RSTB_FIFO0_SHIFT (9)
#define RSTB_CLK_NCO_SHIFT (7)
#define RSTB_CLK_SSCG_2BIT_SHIFT (6)
#define RSTB_CLK_SSCG_7BIT_SHIFT (5)
#define RSTB_CLK_PIXEL_SHIFT (4)
#define RSTB_MOD_CLK_SHIFT (3)
#define RSTB_PCLK_SHIFT (2)
#define RSTB_CLK_VCO20_SHIFT (1)
#define RSTB_ALL_SHIFT (0)

#define RSTB_CT_MASK (0x1 << RSTB_CT_SHIFT)
#define RSTB_FIFO2_MASK (0x1 << RSTB_FIFO2_SHIFT)
#define RSTB_FIFO1_MASK (0x1 << RSTB_FIFO1_SHIFT)
#define RSTB_FIFO0_MASK (0x1 << RSTB_FIFO0_SHIFT)
#define RSTB_CLK_NCO_MASK (0x1 << RSTB_CLK_NCO_SHIFT)
#define RSTB_CLK_SSCG_2BIT_MASK (0x1 << RSTB_CLK_SSCG_2BIT_SHIFT)
#define RSTB_CLK_SSCG_7BIT_MASK (0x1 << RSTB_CLK_SSCG_7BIT_SHIFT)
#define RSTB_CLK_PIXEL_MASK (0x1 << RSTB_CLK_PIXEL_SHIFT)
#define RSTB_MOD_CLK_MASK (0x1 << RSTB_MOD_CLK_SHIFT)
#define RSTB_PCLK_MASK (0x1 << RSTB_PCLK_SHIFT)
#define RSTB_CLK_VCO20_MASK (0x1 << RSTB_CLK_VCO20_SHIFT)
#define RSTB_ALL_MASK (0x1 << RSTB_ALL_SHIFT)

/*
 * Enable and inverts clocks
 */
#define CT_REFCLK_SEL_SHIFT (19)
#define DACCLK_MANUAL_VALUE_SHIFT (18)
#define DACCLK_MODE_SHIFT (17)
#define DACCLK_EN_SHIFT (16)
#define CLK_INV_CLK_CT_REF_SHIFT (15)
#define CLK_INV_CLK_NCO_SHIFT (14)
#define CLK_INV_CLK_SSCG_2BIT_SHIFT (13)
#define CLK_INV_CLK_SSCG_7BIT_SHIFT (12)
#define CLK_INV_CLK_PIXEL_SHIFT (11)
#define CLK_INV_MOD_CLK_SHIFT (10)
#define CLK_INV_CLK_VCO20_SHIFT (8)
#define CLK_EN_CLK_CT_REF_SHIFT (7)
#define CLK_EN_CLK_NCO_SHIFT (6)
#define CLK_EN_CLK_SSCG_2BIT_SHIFT (5)
#define CLK_EN_CLK_SSCG_7BIT_SHIFT (4)
#define CLK_EN_CLK_PIXEL_SHIFT (3)
#define CLK_EN_MOD_CLK_SHIFT (2)
#define CLK_EN_CLK_VCO20_SHIFT (0)

#define CT_REFCLK_SEL_MASK (0x1 << CT_REFCLK_SEL_SHIFT)
#define DACCLK_MANUAL_VALUE_MASK (0x1 << DACCLK_MANUAL_VALUE_SHIFT)
#define DACCLK_MODE_MASK (0x1 << DACCLK_MODE_SHIFT)
#define DACCLK_EN_MASK (0x1 << DACCLK_EN_SHIFT)
#define CLK_INV_CLK_CT_REF_MASK (0x1 << CLK_INV_CLK_CT_REF_SHIFT)
#define CLK_INV_CLK_NCO_MASK (0x1 << CLK_INV_CLK_NCO_SHIFT)
#define CLK_INV_CLK_SSCG_2BIT_MASK (0x1 << CLK_INV_CLK_SSCG_2BIT_SHIFT)
#define CLK_INV_CLK_SSCG_7BIT_MASK (0x1 << CLK_INV_CLK_SSCG_7BIT_SHIFT)
#define CLK_INV_CLK_PIXEL_MASK (0x1 << CLK_INV_CLK_PIXEL_SHIFT)
#define CLK_INV_MOD_CLK_MASK (0x1 << CLK_INV_MOD_CLK_SHIFT)
#define CLK_INV_CLK_VCO20_MASK (0x1 << CLK_INV_CLK_VCO20_SHIFT)
#define CLK_EN_CLK_CT_REF_MASK (0x1 << CLK_EN_CLK_CT_REF_SHIFT)
#define CLK_EN_CLK_NCO_MASK (0x1 << CLK_EN_CLK_CT_REF_SHIFT)
#define CLK_EN_CLK_SSCG_2BIT_MASK (0x1 << CLK_EN_CLK_SSCG_2BIT_SHIFT)
#define CLK_EN_CLK_SSCG_7BIT_MASK (0x1 << CLK_EN_CLK_SSCG_7BIT_SHIFT)
#define CLK_EN_CLK_PIXEL_MASK (0x1 << CLK_EN_CLK_PIXEL_SHIFT)
#define CLK_EN_MOD_CLK_MASK (0x1 << CLK_EN_MOD_CLK_SHIFT)
#define CLK_EN_CLK_VCO20_MASK (0x1 << CLK_EN_CLK_VCO20_SHIFT)

/*
 * Sets auto strobe mode
 */
#define LVDS_AUTO_STB_SET_STB_DELAY2_SHIFT (12)
#define LVDS_AUTO_STB_SET_STB_DELAY1_SHIFT (8)
#define LVDS_AUTO_STB_SET_STB_DELAY0_SHIFT (4)
#define LVDS_AUTO_STB_SET_STB_REQ_LENGTH_SHIFT (2)
#define LVDS_AUTO_STB_SET_STB_POLARITY_SHIFT (1)
#define LVDS_AUTO_STB_SET_STB_AUTO_EN_SHIFT (0)

#define LVDS_AUTO_STB_SET_STB_DELAY2_MASK \
	(0xF << LVDS_AUTO_STB_SET_STB_DELAY2_SHIFT)
#define LVDS_AUTO_STB_SET_STB_DELAY1_MASK \
	(0xF << LVDS_AUTO_STB_SET_STB_DELAY1_SHIFT)
#define LVDS_AUTO_STB_SET_STB_DELAY0_MASK \
	(0xF << LVDS_AUTO_STB_SET_STB_DELAY0_SHIFT)
#define LVDS_AUTO_STB_SET_STB_REQ_LENGTH_MASK \
	(0x3 << LVDS_AUTO_STB_SET_STB_REQ_LENGTH_SHIFT)
#define LVDS_AUTO_STB_SET_STB_POLARITY_MASK \
	(0x1 << LVDS_AUTO_STB_SET_STB_POLARITY_SHIFT)
#define LVDS_AUTO_STB_SET_STB_AUTO_EN_MASK \
	(0x1 << LVDS_AUTO_STB_SET_STB_AUTO_EN_SHIFT)

/*
 * Manual strobe mode enable
 */
#define LVDS_STB_EN_STB_EN_SHIFT (0)

#define LVDS_STB_EN_STB_EN_MASK (0x1 << LVDS_STB_EN_STB_EN_SHIFT)

/*
 * Enable FIFOs
 */
#define LVDS_EN_FIFO2_EN_SHIFT (3)
#define LVDS_EN_FIFO1_EN_SHIFT (2)
#define LVDS_EN_FIFO0_EN_SHIFT (1)
#define LVDS_EN_DATA_EN_SHIFT (0)

#define LVDS_EN_FIFO2_EN_MASK (0x1 << LVDS_EN_FIFO2_EN_SHIFT)
#define LVDS_EN_FIFO1_EN_MASK (0x1 << LVDS_EN_FIFO1_EN_SHIFT)
#define LVDS_EN_FIFO0_EN_MASK (0x1 << LVDS_EN_FIFO0_EN_SHIFT)
#define LVDS_EN_DATA_EN_MASK (0x1 << LVDS_EN_DATA_EN_SHIFT)

/*
 * Selects format, color depth, operating mode and up-sampling ratio
 */
#define LVDS_FORMAT_UPSAMPLE_RATIO_SHIFT (3)
#define LVDS_FORMAT_BALANCED_EN_SHIFT (2)
#define LVDS_FORMAT_COLOR_DEPTH_SHIFT (1)
#define LVDS_FORMAT_COLOR_FORMAT_SHIFT (0)

#define LVDS_FORMAT_UPSAMPLE_RATIO_MASK \
	(0x7 << LVDS_FORMAT_UPSAMPLE_RATIO_SHIFT)
#define LVDS_FORMAT_BALANCED_EN_MASK (0x1 << LVDS_FORMAT_BALANCED_EN_SHIFT)
#define LVDS_FORMAT_COLOR_DEPTH_MASK (0x1 << LVDS_FORMAT_COLOR_DEPTH_SHIFT)
#define LVDS_FORMAT_COLOR_FORMAT_MASK (0x1 << LVDS_FORMAT_COLOR_FORMAT_SHIFT)

/*
 * Selects a port option for dual pixel mode
 */
#define LVDS_PORT_SYNC_TRANSMITTED_SHIFT (12)
#define LVDS_PORT_LANE_EN_SHIFT (4)
#define LVDS_PORT_USE_SYNC_FROM_OP_SHIFT (2)
#define LVDS_PORT_VSYNC_HSYNC_SWAP_SHIFT (1)
#define LVDS_PORT_SET_SECONDARY_PORT_SHIFT (0)

#define LVDS_PORT_SYNC_TRANSMITTED_MASK \
	(0x7 << LVDS_PORT_SYNC_TRANSMITTED_SHIFT)
#define LVDS_PORT_LANE_EN_MASK (0x1F << LVDS_PORT_LANE_EN_SHIFT)
#define LVDS_PORT_USE_SYNC_FROM_OP_MASK \
	(0x1 << LVDS_PORT_USE_SYNC_FROM_OP_SHIFT)
#define LVDS_PORT_VSYNC_HSYNC_SWAP_MASK \
	(0x1 << LVDS_PORT_VSYNC_HSYNC_SWAP_SHIFT)
#define LVDS_PORT_SET_SECONDARY_PORT_MASK \
	(0x1 << LVDS_PORT_SET_SECONDARY_PORT_SHIFT)

/*
 * Selects LVDS Start-up mode
 */
#define LVDS_STARTUP_MODE_FIFO2_RD_EN_TIMING_SHIFT (13)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO2_SHIFT (10)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO1_SHIFT (7)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO0_SHIFT (4)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_DATA_SHIFT (1)
#define LVDS_STARTUP_MODE_START_MANUAL_MODE_EN_SHIFT (0)

#define LVDS_STARTUP_MODE_FIFO2_RD_EN_TIMING_MASK \
	(0x3 << LVDS_STARTUP_MODE_FIFO2_RD_EN_TIMING_SHIFT)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO2_MASK \
	(0x7 << LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO2_SHIFT)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO1_MASK \
	(0x7 << LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO1_SHIFT)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO0_MASK \
	(0x7 << LVDS_STARTUP_MODE_WAIT_PARAM_BF_FIFO0_SHIFT)
#define LVDS_STARTUP_MODE_WAIT_PARAM_BF_DATA_MASK \
	(0x7 << LVDS_STARTUP_MODE_WAIT_PARAM_BF_DATA_SHIFT)
#define LVDS_STARTUP_MODE_START_MANUAL_MODE_EN_MASK \
	(0x1 << LVDS_STARTUP_MODE_START_MANUAL_MODE_EN_SHIFT)

/*
 * Controls lane skew and p/n swap
 */
#define LVDS_USER_MODE_PHY_IF_SET0_DATA3_PN_SWAP_SHIFT (19)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA3_LANE_SKEW_SHIFT (16)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA2_PN_SWAP_SHIFT (15)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA2_LANE_SKEW_SHIFT (12)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA1_PN_SWAP_SHIFT (11)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA1_LANE_SKEW_SHIFT (8)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA0_PN_SWAP_SHIFT (7)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA0_LANE_SKEW_SHIFT (4)
#define LVDS_USER_MODE_PHY_IF_SET0_CLK_PN_SWAP_SHIFT (3)
#define LVDS_USER_MODE_PHY_IF_SET0_CLK_LANE_SKEW_SHIFT (0)

#define LVDS_USER_MODE_PHY_IF_SET0_DATA3_PN_SWAP_MASK \
	(0x1 << LVDS_USER_MODE_PHY_IF_SET0_DATA3_PN_SWAP_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA3_LANE_SKEW_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET0_DATA3_LANE_SKEW_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA2_PN_SWAP_MASK \
	(0x1 << LVDS_USER_MODE_PHY_IF_SET0_DATA2_PN_SWAP_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA2_LANE_SKEW_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET0_DATA2_LANE_SKEW_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA1_PN_SWAP_MASK \
	(0x1 << LVDS_USER_MODE_PHY_IF_SET0_DATA1_PN_SWAP_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA1_LANE_SKEW_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET0_DATA1_LANE_SKEW_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA0_PN_SWAP_MASK \
	(0x1 << LVDS_USER_MODE_PHY_IF_SET0_DATA0_PN_SWAP_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_DATA0_LANE_SKEW_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET0_DATA0_LANE_SKEW_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_CLK_PN_SWAP_MASK \
	(0x1 << LVDS_USER_MODE_PHY_IF_SET0_CLK_PN_SWAP_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET0_CLK_LANE_SKEW_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET0_CLK_LANE_SKEW_SHIFT)

/*
 * Selects lane input
 */
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE4_SHIFT (16)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE3_SHIFT (12)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE2_SHIFT (8)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE1_SHIFT (4)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE0_SHIFT (0)

#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE4_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET1_SET_LANE4_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE3_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET1_SET_LANE3_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE2_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET1_SET_LANE2_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE1_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET1_SET_LANE1_SHIFT)
#define LVDS_USER_MODE_PHY_IF_SET1_SET_LANE0_MASK \
	(0x7 << LVDS_USER_MODE_PHY_IF_SET1_SET_LANE0_SHIFT)

/*
 * Debug monitor of PHY PLL and FIFOs
 */
#define LVDS_MONITOR_DEBUG1_FIFO1_STATUS_SHIFT (16)
#define LVDS_MONITOR_DEBUG1_FIFO0_STATUS_SHIFT (4)
#define LVDS_MONITOR_DEBUG1_PLL_STATUS_SHIFT (0)

#define LVDS_MONITOR_DEBUG1_FIFO1_STATUS_MASK \
	(0xFFF << LVDS_MONITOR_DEBUG1_FIFO1_STATUS_SHIFT)
#define LVDS_MONITOR_DEBUG1_FIFO0_STATUS_MASK \
	(0xFFF << LVDS_MONITOR_DEBUG1_FIFO0_STATUS_SHIFT)
#define LVDS_MONITOR_DEBUG1_PLL_STATUS_MASK \
	(0xF << LVDS_MONITOR_DEBUG1_PLL_STATUS_SHIFT)

/*
 * Controls coarse tuning operation
 */
#define LVDS_CTSET0_RUN_SHIFT (1)
#define LVDS_CTSET0_ENABLE_SHIFT (0)

#define LVDS_CTSET0_RUN_MASK (0x1 << LVDS_CTSET0_RUN_SHIFT)
#define LVDS_CTSET0_ENABLE_MASK (0x1 << LVDS_CTSET0_ENABLE_SHIFT)

/*
 * Controls Manual coarse tuning
 */
#define LVDS_CTSET1_MPLL_CTLCK_SHIFT (13)
#define LVDS_CTSET1_MPLL_DIVN_SHIFT (10)
#define LVDS_CTSET1_MPLL_FCON_SHIFT (0)

#define LVDS_CTSET1_MPLL_CTLCK_MASK (0x1 << LVDS_CTSET1_MPLL_CTLCK_SHIFT)
#define LVDS_CTSET1_MPLL_DIVN_MASK (0x7 << LVDS_CTSET1_MPLL_DIVN_SHIFT)
#define LVDS_CTSET1_MPLL_FCON_MASK (0x3FF << LVDS_CTSET1_MPLL_FCON_SHIFT)

/*
 * Controls counter in coarse tuning
 */
#define LVDS_FCCNTR0_REF_CNT_LEN_SHIFT (24)
#define LVDS_FCCNTR0_VCO_OPEN_WAIT_SHIFT (16)
#define LVDS_FCCNTR0_VCO_ST_WAIT_SHIFT (8)
#define LVDS_FCCNTR0_VCO_CLOSE_WAIT_SHIFT (0)

#define LVDS_FCCNTR0_REF_CNT_LEN_MASK (0xFF << LVDS_FCCNTR0_REF_CNT_LEN_SHIFT)
#define LVDS_FCCNTR0_VCO_OPEN_WAIT_MASK \
	(0xFF << LVDS_FCCNTR0_VCO_OPEN_WAIT_SHIFT)
#define LVDS_FCCNTR0_VCO_ST_WAIT_MASK (0xFF << LVDS_FCCNTR0_VCO_ST_WAIT_SHIFT)
#define LVDS_FCCNTR0_VCO_CLOSE_WAIT_MASK \
	(0xFF << LVDS_FCCNTR0_VCO_CLOSE_WAIT_SHIFT)

/*
 * Controls coarse tuning options
 */
#define LVDS_FCOPT_CLK_DET_SEL_SHIFT (1)
#define LVDS_FCOPT_CT_SEL_SHIFT (0)

#define LVDS_FCOPT_CLK_DET_SEL_MASK (0x1 << LVDS_FCOPT_CLK_DET_SEL_SHIFT)
#define LVDS_FCOPT_CT_SEL_MASK (0x1 << LVDS_FCOPT_CT_SEL_SHIFT)

/*
 * Controls the target conuter value for
 * PLL VCO clock in automatic coarse tuning
 */
#define LVDS_FCCNTR1_CONTIN_TARGET_TH_SHIFT (16)
#define LVDS_FCCNTR1_REF_CNT_SHIFT (0)

#define LVDS_FCCNTR1_CONTIN_TARGET_TH_MASK \
	(0xFFFF << LVDS_FCCNTR1_CONTIN_TARGET_TH_SHIFT)
#define LVDS_FCCNTR1_REF_CNT_MASK (0xFFFF << LVDS_FCCNTR1_REF_CNT_SHIFT)

/*
 * Controls continuous coarse tuning
 */
#define LVDS_FCCONTINSET0_CONTIN_UPD_STEP_SHIFT (4)
#define LVDS_FCCONTINSET0_CONTIN_UPD_POL_SHIFT (3)
#define LVDS_FCCONTINSET0_CONTIN_UPD_OPT_SHIFT (1)
#define LVDS_FCCONTINSET0_CONTIN_UPD_EN_SHIFT (0)

#define LVDS_FCCONTINSET0_CONTIN_UPD_STEP_MASK \
	(0xF << LVDS_FCCONTINSET0_CONTIN_UPD_STEP_SHIFT)
#define LVDS_FCCONTINSET0_CONTIN_UPD_POL_MASK \
	(0x1 << LVDS_FCCONTINSET0_CONTIN_UPD_POL_SHIFT)
#define LVDS_FCCONTINSET0_CONTIN_UPD_OPT_MASK \
	(0x3 << LVDS_FCCONTINSET0_CONTIN_UPD_OPT_SHIFT)
#define LVDS_FCCONTINSET0_CONTIN_UPD_EN_MASK \
	(0x1 << LVDS_FCCONTINSET0_CONTIN_UPD_EN_SHIFT)

/*
 * Controls the reading for continuous coarse tuning
 */
#define LVDS_FCCONTINSET1_CONTIN_UPD_TIME_SHIFT (28)
#define LVDS_FCCONTINSET1_CONTIN_UPD_RATE_SHIFT (0)

#define LVDS_FCCONTINSET1_CONTIN_UPD_TIME_MASK \
	(0xF << LVDS_FCCONTINSET1_CONTIN_UPD_TIME_SHIFT)
#define LVDS_FCCONTINSET1_CONTIN_UPD_RATE_MASK \
	(0xFFFFFFF << LVDS_FCCONTINSET1_CONTIN_UPD_RATE_SHIFT)

/*
 * Controls the FCON threshold value for continuous coarse tuning
 */
#define LVDS_FCCONTINSET2_CONTIN_UPD_TH_UP_SHIFT (12)
#define LVDS_FCCONTINSET2_CONTIN_UPD_TH_DN_SHIFT (0)

#define LVDS_FCCONTINSET2_CONTIN_UPD_TH_UP_MASK \
	(0x3FF << LVDS_FCCONTINSET2_CONTIN_UPD_TH_UP_SHIFT)
#define LVDS_FCCONTINSET2_CONTIN_UPD_TH_DN_MASK \
	(0x3FF << LVDS_FCCONTINSET2_CONTIN_UPD_TH_DN_SHIFT)

/*
 * the status of coarse tuning
 */
#define LVDS_FCST_CLK_OK_MASK (0x00000001)
#define LVDS_FCST_BUSY_MASK (0x00000002)
#define LVDS_FCST_DONE_MASK (0x00000004)
#define LVDS_FCST_ERROR_MASK (0x00000008)
#define LVDS_FCST_VOC_SUB_MASK (0x00000010)
#define LVDS_FCST_REF_CLK_MASK (0x00000020)

/*
 * the status of PHY PLL
 */
#define LVDS_MONITOR_DEBUG1_LKVDETL_MASK (0x00000001)
#define LVDS_MONITOR_DEBUG1_LKVDET2_MASK (0x00000002)
#define LVDS_MONITOR_DEBUG1_LKVDETLOW_MASK (0x00000004)
#define LVDS_MONITOR_DEBUG1_LKVDETHIGH_MASK (0x00000008)

enum {
	LVDS_PHY_INIT = 0,
	LVDS_PHY_READY,
	LVDS_PHY_START,
	LVDS_PHY_CONFIG_MAX
}; //LVDS_PHY_CONFIG

enum {
	LVDS_PHY_PORT_S0 = 0,
	LVDS_PHY_PORT_S1,
	LVDS_PHY_PORT_D0,
	LVDS_PHY_PORT_D1,
	LVDS_PHY_PORT_MAX
}; //LVDS_PHY_PORT

enum {
	LVDS_PHY_CLK_LANE = 0,
	LVDS_PHY_DATA0_LANE,
	LVDS_PHY_DATA1_LANE,
	LVDS_PHY_DATA2_LANE,
	LVDS_PHY_DATA3_LANE,
	LVDS_PHY_LANE_MAX
}; //LVDS_PHY_LANE

enum {
	LVDS_PHY_FCON_MANUAL = 0,
	LVDS_PHY_FCON_AUTOMATIC,
	LVDS_PHY_FCON_MAX
}; //LVDS_PHY_FCON_MODE

unsigned int LVDS_PHY_GetUpsampleRatio(
	unsigned int p_port, unsigned int s_port, unsigned int freq);
unsigned int LVDS_PHY_GetRefCnt(
	unsigned int p_port, unsigned int s_port, unsigned int freq,
	unsigned int upsample_ratio);
void LVDS_PHY_SetFormat(
	unsigned int port, unsigned int balance, unsigned int depth,
	unsigned int format, unsigned int freq);
void LVDS_PHY_SetFifoEnableTiming(unsigned int port, unsigned int cycle);
void LVDS_PHY_SetUserMode(
	unsigned int port, unsigned int lane, unsigned int skew,
	unsigned int swap);
void
LVDS_PHY_SetLaneSwap(unsigned int port, unsigned int lane, unsigned int select);
void LVDS_PHY_SetPortOption(
	unsigned int port, unsigned int port_mode, unsigned int sync_swap,
	unsigned int use_other_port, unsigned int lane_en,
	unsigned int sync_transmit_src);
void LVDS_PHY_LaneEnable(unsigned int port, unsigned int enable);
void LVDS_PHY_FifoEnable(unsigned int port, unsigned int enable);
void LVDS_PHY_FifoReset(unsigned int port, unsigned int reset);
void LVDS_PHY_SWReset(unsigned int port, unsigned int reset);
void LVDS_PHY_ClockEnable(unsigned int port, unsigned int enable);
void
LVDS_PHY_SetStrobe(unsigned int port, unsigned int mode, unsigned int enable);
void LVDS_PHY_SetFcon(
	unsigned int port, unsigned int mode, unsigned int loop,
	unsigned int division, unsigned int fcon);
void LVDS_PHY_FConEnable(unsigned int port, unsigned int enable);
void
LVDS_PHY_SetCFcon(unsigned int port, unsigned int mode, unsigned int enable);
void LVDS_PHY_CheckPLLStatus(unsigned int p_port, unsigned int s_port);
void LVDS_PHY_StrobeConfig(
	unsigned int p_port, unsigned int s_port, unsigned int upsample_ratio,
	unsigned int step, unsigned int vcm, unsigned int vsw);
unsigned int
LVDS_PHY_CheckStatus(unsigned int p_port, unsigned int s_port);
unsigned int
LVDS_PHY_GetRegValue(unsigned int port, unsigned int offset);
void LVDS_PHY_LaneSwap(
	unsigned int s_port_en, unsigned int lvds_main, unsigned int lvds_sub,
	unsigned int *lane_main, unsigned int *lane_sub);
void LVDS_PHY_VsSet(unsigned int p_port, unsigned int s_port, unsigned int vs);
int LVDS_PHY_CheckFcon(
	unsigned int p_port, unsigned int s_port, unsigned int mfcon,
	unsigned int sfcon);
unsigned int LVDS_PHY_Fcon_Value(unsigned int port);
#endif
